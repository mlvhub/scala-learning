FUNCTION_NAME=ziolambda
HANDLER=ziolambda.LambdaHandler

.PHONY: clean
clean:
	rm -rf lambda lambda.build_artifacts.txt layer.zip response.txt

.PHONY: build-native
build-native:
	scala-cli \
		--power package \
		--main-class $(HANDLER) \
		--native-image . \
		-o lambda \
		-- \
		--no-fallback \
		--enable-url-protocols=http \
		--initialize-at-build-time=org.slf4j.simple.SimpleLogger \
		--initialize-at-build-time=io.netty.util.internal.logging.Slf4JLoggerFactory \
		--initialize-at-build-time=io.netty.channel.MultithreadEventLoopGroup \
		--initialize-at-build-time=io.netty.util.internal.logging.InternalLoggerFactory \
		--initialize-at-build-time=org.slf4j.LoggerFactory \
		--initialize-at-run-time=io.netty.channel.DefaultFileRegion  \
		--initialize-at-run-time=io.netty.channel.epoll.Native  \
		--initialize-at-run-time=io.netty.channel.epoll.Epoll  \
		--initialize-at-run-time=io.netty.channel.epoll.EpollEventLoop  \
		--initialize-at-run-time=io.netty.channel.epoll.EpollEventArray  \
		--initialize-at-run-time=io.netty.channel.kqueue.KQueue  \
		--initialize-at-run-time=io.netty.channel.kqueue.KQueueEventLoop  \
		--initialize-at-run-time=io.netty.channel.kqueue.KQueueEventArray  \
		--initialize-at-run-time=io.netty.channel.kqueue.Native  \
		--initialize-at-run-time=io.netty.channel.unix.Limits  \
		--initialize-at-run-time=io.netty.channel.unix.Errors  \
		--initialize-at-run-time=io.netty.channel.unix.IovArray  \
		--initialize-at-run-time=io.netty.handler.ssl.BouncyCastleAlpnSslUtils  \
		--initialize-at-run-time=io.netty.incubator.codec.quic.InsecureQuicTokenHandler  \
		--initialize-at-run-time=io.netty.incubator.codec.quic.SecureRandomQuicConnectionIdGenerator \
		--verbose

.PHONY: package
package:
	zip layer.zip bootstrap lambda

.PHONY: delete-lambda
delete-lambda:
	aws lambda delete-function --function-name $(FUNCTION_NAME)

.PHONY: create-lambda
create-lambda:
	aws lambda create-function --function-name $(FUNCTION_NAME) \
		--zip-file fileb://layer.zip \
		--handler $(HANDLER)::run \
		--runtime provided.al2023 \
		--role $(role)

.PHONY: update-lambda-env-vars
update-lambda-env-vars:
	./scripts/update-lambda-env-vars.sh $(FUNCTION_NAME)

.PHONY: invoke
invoke:
	./scripts/invoke-lambda.sh $(FUNCTION_NAME)

.PHONY: aws
aws: clean build-native package create-lambda update-lambda-env-vars invoke

.PHONY: run
run:
	./scripts/run.sh
